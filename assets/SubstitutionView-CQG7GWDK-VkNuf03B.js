import"./CipherOutput-BKM2_HCe-KsvlRx8m.js";import{c as n,h as s}from"./decrypt-NT7MzVtQ-B8zjEVZq.js";import{o as c}from"./CipherCard-BXukLyfh-BLEmzOo9.js";import u from"./KeySubstitution-DdqtU0zb-BLmmEp_n.js";import{d as h,r as m,k as y,i as d,w as i,f as b,b as e,h as a,u as l}from"./index-Cj9FIklH.js";import"./_plugin-vue_export-helper-CHgC5LLL-lGy7RumW.js";import"./ScanLine-BgZgNptX-DPZCgxtK.js";import"./mixin-D8O0vS0M-DDdbQtdZ.js";const o=Object.freeze(Object.defineProperty({__proto__:null,decrypt:s,encrypt:n},Symbol.toStringTag,{value:"Module"})),E=h({__name:"SubstitutionView",setup(f){const t=m({cipherAlphabet:"qwertyuiopasdfghjklzxcvbnm"});return(x,r)=>(d(),y(c,{title:"Simple Substitution Cipher","encrypt-algorithm":l(o).encrypt(t.value),"decrypt-algorithm":l(o).decrypt(t.value),"cipher-key":t.value},{theory:i(()=>r[1]||(r[1]=[e("p",null," One of the oldest ciphers, where each plaintext letter is mapped to a fixed substitute letter, creating a scrambled alphabet. ",-1),e("h3",null,"How It Works",-1),e("p",null,"A random permutation of the alphabet is used (e.g., A→Z, B→Y, C→X, ..., Z→A). Example:",-1),e("div",{class:"cipher-example"},[a(" Plaintext: A B C D E F G ... Z"),e("br"),a(" Ciphertext: Z Y X W V U T ... A ")],-1),e("h3",null,"Mathematical Formula",-1),e("p",null,[a("Encryption: "),e("strong",null,"E(x) = σ(x)"),a(", where σ is a permutation function.")],-1),e("h3",null,"Security",-1),e("p",null," Vulnerable to frequency analysis (e.g., E→T, A→E patterns). Possible keys: 26! (~88 bits), but broken by linguistic patterns. ",-1)])),cipherKey:i(()=>[b(u,{"cipher-key":t.value,"onUpdate:cipherKey":r[0]||(r[0]=p=>t.value=p)},null,8,["cipher-key"])]),_:1},8,["encrypt-algorithm","decrypt-algorithm","cipher-key"]))}});export{E as default};
